import { create } from 'zustand';
import { getProfile } from '../../src/services/apiServices';

const useUserStore = create((set) => ({
  user: {
    empId: "",
    fullName: "",
    gender: "",
    dateOfBirth: "",
    dateOfJoining: "",
    salary: 0.0,
    permanentAddress: "",
    temporaryAddress: "",
    phone1: "",
    officeEmail: "",
    fatherName: "",
    nationality: "",
    maritalStatus: "",
    spouseName: "",
    designation: "",
    bloodGroup: "",
    emergencyContactName1: "",
    emergencyContactNumber1: 0.0,
    emergencyContactName2: "",
    emergencyContactNumber2: 0.0,
    epfSubscriber: "",
    epfNumber: "",
    uanNumber: "",
    bankAccountNumber: 0.0,
    adhaarNumber: "",
    passportNumber: "",
    voterNumber: "",
    pastExperience: 0.0,
    npsSubscriber: "",
    esiCovered: "",
    email: "",
    managerId: "",
    managerName: "",
    totalLeaveBalance: 0.0,
    earnedLeaveBalance: 0.0,
    sickLeaveBalance: 0.0,
    maternityLeaveBalance: 0.0,
    paternityLeaveBalance: 0.0,
    workFromHome: 0.0,
    modifiedAt: "",
    modifiedBy: "",
    nocTeam: false,
    roleName: "",
  },

  setUser: (newUser) => set({ user: newUser }),

  // New function to fetch data from the API
  fetchUserData: async () => {
    try {
      const profileData = await getProfile();
      set({
        user: {
          empId: profileData.empId,
          fullName: profileData.fullName,
          gender: profileData.gender,
          dateOfBirth: profileData.dateOfBirth,
          dateOfJoining: profileData.dateOfJoining,
          salary: profileData.salary,
          permanentAddress: profileData.permanentAddress || "",
          temporaryAddress: profileData.temporaryAddress || "",
          phone1: profileData.phone1,
          officeEmail: profileData.officeEmail,
          fatherName: profileData.fatherName,
          nationality: profileData.nationality,
          maritalStatus: profileData.maritalStatus || "",
          spouseName: profileData.spouseName || "",
          designation: profileData.designation,
          bloodGroup: profileData.bloodGroup || "",
          emergencyContactName1: profileData.emergencyContactName1 || "",
          emergencyContactNumber1: profileData.emergencyContactNumber1 || 0.0,
          emergencyContactName2: profileData.emergencyContactName2 || "",
          emergencyContactNumber2: profileData.emergencyContactNumber2 || 0.0,
          epfSubscriber: profileData.epfSubscriber || "",
          epfNumber: profileData.epfNumber || "0",
          uanNumber: profileData.uanNumber || "0",
          bankAccountNumber: profileData.bankAccountNumber || 0.0,
          adhaarNumber: profileData.adhaarNumber || "",
          passportNumber: profileData.passportNumber || "",
          voterNumber: profileData.voterNumber || "",
          pastExperience: profileData.pastExperience || 0.0,
          npsSubscriber: profileData.npsSubscriber || "",
          esiCovered: profileData.esiCovered || "",
          email: profileData.email || "",
          managerId: profileData.managerId,
          managerName: profileData.managerName,
          totalLeaveBalance: profileData.totalLeaveBalance || 0.0,
          earnedLeaveBalance: profileData.earnedLeaveBalance || 0.0,
          sickLeaveBalance: profileData.sickLeaveBalance || 0.0,
          maternityLeaveBalance: profileData.maternityLeaveBalance || 0.0,
          paternityLeaveBalance: profileData.paternityLeaveBalance || 0.0,
          workFromHome: profileData.workFromHome || 0.0,
          modifiedAt: profileData.modifiedAt,
          modifiedBy: profileData.modifiedBy,
          nocTeam: profileData.nocTeam,
          roleName : 'MANAGER',
        },
      });
    } catch (err) {
      console.log('Failed to load user data');
    }
  }
}));

export default useUserStore;
